<?php

class PWString {
    /** Reverses a string 
      * @return string */
    static public function reverseString($str) {
	   $rev_str = '';
	   for ($i = mb_strlen($str)-1; $i>=0; $i-- ) {
    	    $rev_str .= mb_substr($str, $i, 1);
	   }	
	   return $rev_str; 
    }

    /** Replaces all occurrences of the search binary string with the replacement string 
      * @return string */
    static public function strReplace($needle, $replacement, $haystack) {
   	    return implode($replacement, mb_split($needle, $haystack));
    }

    /** Escapes quotes
      * @return string */
    static public function escapeQuotes($haystack) {
   	    $haystack = implode('\"', mb_split('"', $haystack));
   	    return implode("\'", mb_split("'", $haystack));
    }

    /** Transforms case of $word in the correspondence with $mask_word.
     * @param string $word word with unknown case, i.e. lemma generated by phpMorphy in UPPERCASE,
     * @param string $mask_word word with right case, i.e. word-form, 
     * @return string source word in right case.
     */
    static public function restoreCase($word, $mask_word) {
        $out = '';
        for ($i=0; $i<mb_strlen($word); $i++) {
            $in_char = mb_substr($word,$i,1);
            $mask_char = mb_substr($mask_word,$i,1);
            if (isset($mask_char) && ($in_char==$mask_char || mb_strtoupper($in_char)==mb_strtoupper($mask_char)))
                $out .= $mask_char;
            else $out .= mb_strtolower($in_char);
        }
        return $out;               
    }
}
?>